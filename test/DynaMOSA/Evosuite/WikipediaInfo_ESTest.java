/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 06 15:31:57 GMT 2025
 */

package exemplo.wikipedia;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import exemplo.wikipedia.WikipediaInfo;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WikipediaInfo_ESTest extends WikipediaInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(2150);
      hashSet0.add(integer0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(hashSet0);
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      wikipediaInfo0.setCategoryArticleMap(hashMap0);
      hashMap0.put(integer0, hashSet0);
      int int0 = wikipediaInfo0.getTotalCategorizedArticles();
      assertEquals(1, int0);
      assertEquals(1, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      wikipediaInfo0.getDistributionOfArticlesByCategory();
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(vector0);
      wikipediaInfo0.setCategoryArticleMap((Map<Integer, Set<Integer>>) null);
      // Undeclared exception!
      try { 
        wikipediaInfo0.getTotalCategorizedArticles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("exemplo.wikipedia.WikipediaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      wikipediaInfo0.setCategoryArticleMap((Map<Integer, Set<Integer>>) null);
      // Undeclared exception!
      try { 
        wikipediaInfo0.getDistributionOfArticlesByCategory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("exemplo.wikipedia.WikipediaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(linkedList0);
      // Undeclared exception!
      try { 
        wikipediaInfo0.getAverageFanOut((Map<Integer, Set<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("exemplo.wikipedia.WikipediaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(linkedList0);
      wikipediaInfo0.setCategoryArticleMap((Map<Integer, Set<Integer>>) null);
      // Undeclared exception!
      try { 
        wikipediaInfo0.getArticlesWithOverlappingCategories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("exemplo.wikipedia.WikipediaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      List<Integer> list0 = stack0.subList(0, 0);
      Integer integer0 = new Integer((-1));
      stack0.add(integer0);
      WikipediaInfo wikipediaInfo0 = null;
      try {
        wikipediaInfo0 = new WikipediaInfo(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(776);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(priorityQueue0);
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer(776);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      wikipediaInfo0.setCategoryArticleMap(hashMap0);
      wikipediaInfo0.getTotalCategorizedArticles();
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      wikipediaInfo0.setCategoryArticleMap(hashMap0);
      Map<Integer, Integer> map0 = wikipediaInfo0.getDistributionOfArticlesByCategory();
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      treeSet0.add(integer0);
      Integer integer1 = new Integer((-2171));
      hashMap0.put(integer1, treeSet1);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet1);
      wikipediaInfo0.setCategoryArticleMap(hashMap0);
      int int0 = wikipediaInfo0.getArticlesWithOverlappingCategories();
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WikipediaInfo.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      treeSet0.add(integer0);
      Integer integer1 = new Integer(1583);
      hashMap0.put(integer1, treeSet0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      wikipediaInfo0.setCategoryArticleMap(hashMap0);
      int int0 = wikipediaInfo0.getArticlesWithOverlappingCategories();
      assertEquals(1, int0);
      assertEquals(1, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      treeSet0.add(integer0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      double double0 = wikipediaInfo0.getAverageFanOut(hashMap0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = wikipediaInfo0.getAverageFanOut(hashMap0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      hashMap0.put(integer0, treeSet0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      double double0 = wikipediaInfo0.getAverageFanOut(hashMap0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Set<Integer>> hashMap0 = new HashMap<Integer, Set<Integer>>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      double double0 = wikipediaInfo0.getAverageFanOut(hashMap0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = wikipediaInfo0.getAverageFanOut(hashMap0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, wikipediaInfo0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-1431655764));
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSet0.add(integer0);
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      int int0 = wikipediaInfo0.getNumberOfPages();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WikipediaInfo wikipediaInfo0 = null;
      try {
        wikipediaInfo0 = new WikipediaInfo((Iterable<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // O conjunto de p\u00C3\u00A1ginas n\u00C3\u00A3o pode ser nulo.
         //
         verifyException("exemplo.wikipedia.WikipediaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      WikipediaInfo wikipediaInfo0 = new WikipediaInfo(treeSet0);
      int int0 = wikipediaInfo0.getNumberOfPages();
      assertEquals(0, int0);
  }
}
